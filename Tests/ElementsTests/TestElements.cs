using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.XmlDiffPatch;
using Fonlow.SyncML;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Xunit;
using Fonlow.SyncML.Elements;
using Fonlow.Testing;

namespace Fonlow.TestSyncMLElements
{
    /// <summary>
    /// Base class for TestFixture classes.
    /// </summary>
    /// 
    [Collection(TestConstants.SyncMLData)]
    public class TestBase
    {

        protected string testcasePath;

        /// <summary>
        /// Compare 2 XML strings, ignoring comments, white spaces and xml declaration and child order.
        /// </summary>
        /// <returns>Ture if the same.</returns>
        protected bool CompareXml(XElement x1, XElement x2)
        {
            XmlDiff diff = new XmlDiff(XmlDiffOptions.IgnoreChildOrder | XmlDiffOptions.IgnoreComments
                | XmlDiffOptions.IgnoreWhitespace | XmlDiffOptions.IgnoreXmlDecl 
                | XmlDiffOptions.IgnoreNamespaces);
            //XElement may otimized the presentation of namespaces, thus sub elements with the same namespace will have namespace text removed.
            // And XmlDiff seems not be able to deal with this.
            // Comparing namespace is not so important.

            return diff.Compare(x1.CreateReader(), x2.CreateReader());
        }

        protected void TestSyncMLFile(string fileName)
        {
 //           SyncMLSyncML f = ReadXmlFile(fileName);
 //           Assert.True(CompareXml(nav.OuterXml, f.XmlText), f.XmlText);

        }


        /// <summary>
        /// Internal test suit for simple elements. Load an XML file, create object, 
        /// then compare XML content with the XML generated by the object
        /// </summary>
        /// <typeparam name="T">SyncMLSimpleElement to test</typeparam>
        internal class TestElement<T> where T : SyncMLSimpleElement, new()
        {
            public static void Test(string fileName)
            {
                XElement nav = XElement.Load(fileName);
                //move away from the root first in the file.
                T f = SyncMLSimpleElementFactory.Create<T>(nav);
                Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
            }


            /// <summary>
            /// Compare 2 XML strings
            /// </summary>
            /// <returns>True if the same.</returns>
            protected static bool CompareXml(XElement x1, XElement x2)
            {
                XmlDiff diff = new XmlDiff(XmlDiffOptions.IgnoreChildOrder | XmlDiffOptions.IgnoreComments
                    | XmlDiffOptions.IgnoreWhitespace | XmlDiffOptions.IgnoreNamespaces);
                return diff.Compare(x1.CreateReader(), x2.CreateReader());
                
            }


        }

        protected virtual string CaseFile(string basicFileName)
        {
            return "SyncML\\" + basicFileName;
        }

    }

    /// <summary>
    /// Test SyncML elements.
    /// </summary>
     
    public class TestElements : TestBase
    {
        [Fact]
        public void TestCmdID()
        {
            TestElement<SyncMLCmdID>.Test(CaseFile("CmdID.xml"));
        }

        [Fact]
        public void TestAdd()
        {
            XElement nav = XElement.Load(CaseFile("Add.xml"));
            
            SyncMLAdd f = SyncMLAdd.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestReplace()
        {
            XElement nav = XElement.Load(CaseFile("Replace.xml"));
            
            SyncMLReplace f = SyncMLReplace.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestDelete()
        {
            XElement nav = XElement.Load(CaseFile("Delete.xml"));
            
            SyncMLDelete f = SyncMLDelete.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestDelete2()
        {
            XElement nav = XElement.Load(CaseFile("Delete2.xml"));
            
            SyncMLDelete f = SyncMLDelete.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestHdr()
        {
            XElement nav = XElement.Load(CaseFile("Hdr.xml"));
            
            SyncMLHdr f = SyncMLHdr.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }


        [Fact]
        public void TestSource()
        {
            XElement nav = XElement.Load(CaseFile("Source.xml"));
            
            SyncMLSource f = SyncMLSource.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestTarget()
        {
            XElement nav = XElement.Load(CaseFile("Target.xml"));
            
            SyncMLTarget f = SyncMLTarget.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestStatus()
        {
            XElement nav = XElement.Load(CaseFile("Status.xml"));
            
            SyncMLStatus f = SyncMLStatus.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestBodyStatus()
        {
            XElement nav = XElement.Load(CaseFile("BodyStatus.xml"));
            
            SyncMLBody f = SyncMLBody.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestBodyMany()
        {
            XElement nav = XElement.Load(CaseFile("BodyMany.xml"));
            
            SyncMLBody f = SyncMLBody.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestAlert()
        {
            XElement nav = XElement.Load(CaseFile("Alert.xml"));
            
            SyncMLAlert f = SyncMLAlert.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestResults()
        {
            XElement nav = XElement.Load(CaseFile("Results.xml"));
            
            SyncMLResults f = SyncMLResults.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestSequence()
        {
            XElement nav = XElement.Load(CaseFile("Sequence.xml"));
            
            SyncMLSequence f = SyncMLSequence.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestSync()
        {
            XElement nav = XElement.Load(CaseFile("Sync.xml"));
            
            SyncMLSync f = SyncMLSync.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }


        [Fact]
        public void TestAtomic()
        {
            XElement nav = XElement.Load(CaseFile("Atomic.xml"));
            
            SyncMLAtomic f = SyncMLAtomic.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }

        [Fact]
        public void TestGet()
        {
            XElement nav = XElement.Load(CaseFile("Get.xml"));

            SyncMLGet f = SyncMLGet.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());
        }



        [Fact]
        public void TestSyncML()
        {
            XElement nav = XElement.Load(CaseFile("SyncML.xml"));

            SyncMLSyncML f = SyncMLSyncML.Create(nav);
            Assert.True(CompareXml(nav, f.Xml), f.Xml.ToString());

        }



    }

/*    /// <summary>
    /// Test Facade functions
    /// </summary>
    [TestClass, Description("Facade functions")]
    public class TestFacade:TestBase
    {
         
        [Test, Description("Alert to local Funambol, and test handling response.")]
        public void TestAlertML()
        {
            SyncMLFacade facade = new SyncMLFacade();
            facade.BasicUriStr = "http://localhost:8080/funambol/ds";
            facade.User = "andy";
            facade.Password = "tttttttt";

            facade.TestResponseEvent += new EventHandler<Fonlow.CommonSync.CompareTextsEventArgs>(facade_TestResponseEvent);
            facade.Alert();
        }

        void facade_TestResponseEvent(object sender, Fonlow.CommonSync.CompareTextsEventArgs e)
        {
            Assert.True(CompareXml(e.Text1, e.Text2), e.Text1+Environment.NewLine+e.Text2);
        }


    }*/


 /*   [TestClass, Description("SyncML message")]
    public class TestMsg : TestBase
    {
        [Fact]
        public void TestBusyStatus()
        {
            TestSyncMLFile("MsgBusyStatus.xml");
        }

        [Fact]
        public void TestSvrCred()
        {
            TestSyncMLFile("MsgSvrCred.xml");
        }
    }*/



}
